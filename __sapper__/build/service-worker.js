(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1619355072481;

	const files = [
		"service-worker-index.html",
		"components/accordion.css",
		"components/accordion.js",
		"components/accordion.min.css",
		"components/accordion.min.js",
		"components/ad.css",
		"components/ad.min.css",
		"components/api.js",
		"components/api.min.js",
		"components/breadcrumb.css",
		"components/breadcrumb.min.css",
		"components/button.css",
		"components/button.min.css",
		"components/calendar.css",
		"components/calendar.js",
		"components/calendar.min.css",
		"components/calendar.min.js",
		"components/card.css",
		"components/card.min.css",
		"components/checkbox.css",
		"components/checkbox.js",
		"components/checkbox.min.css",
		"components/checkbox.min.js",
		"components/comment.css",
		"components/comment.min.css",
		"components/container.css",
		"components/container.min.css",
		"components/dimmer.css",
		"components/dimmer.js",
		"components/dimmer.min.css",
		"components/dimmer.min.js",
		"components/divider.css",
		"components/divider.min.css",
		"components/dropdown.css",
		"components/dropdown.js",
		"components/dropdown.min.css",
		"components/dropdown.min.js",
		"components/embed.css",
		"components/embed.js",
		"components/embed.min.css",
		"components/embed.min.js",
		"components/emoji.css",
		"components/emoji.min.css",
		"components/feed.css",
		"components/feed.min.css",
		"components/flag.css",
		"components/flag.min.css",
		"components/form.css",
		"components/form.js",
		"components/form.min.css",
		"components/form.min.js",
		"components/grid.css",
		"components/grid.min.css",
		"components/header.css",
		"components/header.min.css",
		"components/icon.css",
		"components/icon.min.css",
		"components/image.css",
		"components/image.min.css",
		"components/input.css",
		"components/input.min.css",
		"components/item.css",
		"components/item.min.css",
		"components/label.css",
		"components/label.min.css",
		"components/list.css",
		"components/list.min.css",
		"components/loader.css",
		"components/loader.min.css",
		"components/menu.css",
		"components/menu.min.css",
		"components/message.css",
		"components/message.min.css",
		"components/modal.css",
		"components/modal.js",
		"components/modal.min.css",
		"components/modal.min.js",
		"components/nag.css",
		"components/nag.js",
		"components/nag.min.css",
		"components/nag.min.js",
		"components/placeholder.css",
		"components/placeholder.min.css",
		"components/popup.css",
		"components/popup.js",
		"components/popup.min.css",
		"components/popup.min.js",
		"components/progress.css",
		"components/progress.js",
		"components/progress.min.css",
		"components/progress.min.js",
		"components/rail.css",
		"components/rail.min.css",
		"components/rating.css",
		"components/rating.js",
		"components/rating.min.css",
		"components/rating.min.js",
		"components/reset.css",
		"components/reset.min.css",
		"components/reveal.css",
		"components/reveal.min.css",
		"components/search.css",
		"components/search.js",
		"components/search.min.css",
		"components/search.min.js",
		"components/segment.css",
		"components/segment.min.css",
		"components/shape.css",
		"components/shape.js",
		"components/shape.min.css",
		"components/shape.min.js",
		"components/sidebar.css",
		"components/sidebar.js",
		"components/sidebar.min.css",
		"components/sidebar.min.js",
		"components/site.css",
		"components/site.js",
		"components/site.min.css",
		"components/site.min.js",
		"components/slider.css",
		"components/slider.js",
		"components/slider.min.css",
		"components/slider.min.js",
		"components/state.js",
		"components/state.min.js",
		"components/statistic.css",
		"components/statistic.min.css",
		"components/step.css",
		"components/step.min.css",
		"components/sticky.css",
		"components/sticky.js",
		"components/sticky.min.css",
		"components/sticky.min.js",
		"components/tab.css",
		"components/tab.js",
		"components/tab.min.css",
		"components/tab.min.js",
		"components/table.css",
		"components/table.min.css",
		"components/text.css",
		"components/text.min.css",
		"components/toast.css",
		"components/toast.js",
		"components/toast.min.css",
		"components/toast.min.js",
		"components/transition.css",
		"components/transition.js",
		"components/transition.min.css",
		"components/transition.min.js",
		"components/visibility.js",
		"components/visibility.min.js",
		"favicon.png",
		"global.css",
		"great-success.png",
		"images/about.png",
		"images/about2.png",
		"images/about3.png",
		"images/hemingway.jpg",
		"images/thomas-edison.detail.jpg",
		"jquery.js",
		"jquery.min.js",
		"logo-192.png",
		"logo-512.png",
		"logo.png",
		"manifest.json",
		"semantic.css",
		"semantic.js",
		"semantic.min.css",
		"semantic.min.js",
		"themes/basic/assets/fonts/icons.eot",
		"themes/basic/assets/fonts/icons.svg",
		"themes/basic/assets/fonts/icons.ttf",
		"themes/basic/assets/fonts/icons.woff",
		"themes/default/assets/fonts/brand-icons.eot",
		"themes/default/assets/fonts/brand-icons.svg",
		"themes/default/assets/fonts/brand-icons.ttf",
		"themes/default/assets/fonts/brand-icons.woff",
		"themes/default/assets/fonts/brand-icons.woff2",
		"themes/default/assets/fonts/icons.eot",
		"themes/default/assets/fonts/icons.svg",
		"themes/default/assets/fonts/icons.ttf",
		"themes/default/assets/fonts/icons.woff",
		"themes/default/assets/fonts/icons.woff2",
		"themes/default/assets/fonts/outline-icons.eot",
		"themes/default/assets/fonts/outline-icons.svg",
		"themes/default/assets/fonts/outline-icons.ttf",
		"themes/default/assets/fonts/outline-icons.woff",
		"themes/default/assets/fonts/outline-icons.woff2",
		"themes/default/assets/images/flags.png",
		"themes/github/assets/fonts/octicons-local.ttf",
		"themes/github/assets/fonts/octicons.svg",
		"themes/github/assets/fonts/octicons.ttf",
		"themes/github/assets/fonts/octicons.woff",
		"themes/material/assets/fonts/icons.eot",
		"themes/material/assets/fonts/icons.svg",
		"themes/material/assets/fonts/icons.ttf",
		"themes/material/assets/fonts/icons.woff",
		"themes/material/assets/fonts/icons.woff2"
	];

	const shell = [
		"client/client.93e48d96.js",
		"client/api.d2dd6678.js",
		"client/index.a9437c77.js",
		"client/Home.36f989dc.js",
		"client/index.9b452f5d.js",
		"client/ListErrors.9ff24227.js",
		"client/utils.3c0578a6.js",
		"client/register.3892aeb2.js",
		"client/settings.109b3fcd.js",
		"client/[slug].aebcb317.js",
		"client/index.18142fc3.js",
		"client/_Profile.6af065bb.js",
		"client/index.51017093.js",
		"client/[view].e4463173.js",
		"client/_Editor.8e7f1eb6.js",
		"client/index.d201e32f.js",
		"client/[slug].8a2d7126.js",
		"client/about.f3db8e49.js",
		"client/login.f2ee8f1c.js",
		"client/index.8f5589aa.js",
		"client/[slug].96f4b9e9.js",
		"client/[p].589a623f.js",
		"client/client.cde510e4.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						console.log('err=',err);
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
