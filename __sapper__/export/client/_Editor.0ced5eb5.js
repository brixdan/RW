import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, u as stores$1, w as validate_store, x as component_subscribe, T as goto, e as element, t as text, b as space, c as claim_element, f as children, j as claim_text, g as detach_dev, h as claim_space, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as listen_dev, p as set_data_dev, E as create_component, F as claim_component, G as mount_component, U as set_input_value, $ as action_destroyer, W as prop_dev, B as transition_in, z as transition_out, H as destroy_component, r as destroy_each, K as run_all } from './client.e500f61b.js';
import { a as api, b as put, p as post } from './api.99d0a0f5.js';
import { L as ListErrors } from './ListErrors.a9ffb90c.js';

/* src\routes\editor\_Editor.svelte generated by Svelte v3.36.0 */
const file = "src\\routes\\editor\\_Editor.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	child_ctx[16] = i;
	return child_ctx;
}

// (82:8) {#each article.tagList as tag, i}
function create_each_block(ctx) {
	let div1;
	let div0;
	let t0_value = /*tag*/ ctx[14] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[12](/*i*/ ctx[16]);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, t0_value);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "ui tag label");
			add_location(div0, file, 83, 10, 2065);
			attr_dev(div1, "class", "item");
			add_location(div1, file, 82, 9, 2035);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);

			if (!mounted) {
				dispose = listen_dev(div0, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*article*/ 1 && t0_value !== (t0_value = /*tag*/ ctx[14] + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(82:8) {#each article.tagList as tag, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div9;
	let div8;
	let listerrors;
	let t0;
	let div7;
	let div6;
	let div0;
	let input0;
	let t1;
	let div1;
	let input1;
	let t2;
	let div2;
	let textarea;
	let t3;
	let div3;
	let input2;
	let enter_action;
	let t4;
	let div5;
	let div4;
	let t5;
	let button;
	let t6;
	let current;
	let mounted;
	let dispose;

	listerrors = new ListErrors({
			props: { errors: /*errors*/ ctx[2] },
			$$inline: true
		});

	let each_value = /*article*/ ctx[0].tagList;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div9 = element("div");
			div8 = element("div");
			create_component(listerrors.$$.fragment);
			t0 = space();
			div7 = element("div");
			div6 = element("div");
			div0 = element("div");
			input0 = element("input");
			t1 = space();
			div1 = element("div");
			input1 = element("input");
			t2 = space();
			div2 = element("div");
			textarea = element("textarea");
			t3 = space();
			div3 = element("div");
			input2 = element("input");
			t4 = space();
			div5 = element("div");
			div4 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			button = element("button");
			t6 = text("Publish Article");
			this.h();
		},
		l: function claim(nodes) {
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			claim_component(listerrors.$$.fragment, div8_nodes);
			t0 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div0 = claim_element(div6_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			input0 = claim_element(div0_nodes, "INPUT", {
				class: true,
				type: true,
				placeholder: true
			});

			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div6_nodes);
			div1 = claim_element(div6_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			input1 = claim_element(div1_nodes, "INPUT", {
				class: true,
				type: true,
				placeholder: true
			});

			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div6_nodes);
			div2 = claim_element(div6_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			textarea = claim_element(div2_nodes, "TEXTAREA", {
				class: true,
				rows: true,
				placeholder: true
			});

			children(textarea).forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t3 = claim_space(div6_nodes);
			div3 = claim_element(div6_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			input2 = claim_element(div3_nodes, "INPUT", {
				class: true,
				type: true,
				placeholder: true
			});

			div3_nodes.forEach(detach_dev);
			t4 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div4_nodes);
			}

			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t5 = claim_space(div6_nodes);
			button = claim_element(div6_nodes, "BUTTON", { class: true, type: true, disabled: true });
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "Publish Article");
			button_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input0, "class", "ui input");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Article Title");
			add_location(input0, file, 64, 7, 1379);
			attr_dev(div0, "class", "field");
			add_location(div0, file, 63, 6, 1351);
			attr_dev(input1, "class", "ui input");
			attr_dev(input1, "type", "text");
			attr_dev(input1, "placeholder", "Gist");
			add_location(input1, file, 68, 7, 1522);
			attr_dev(div1, "class", "field");
			add_location(div1, file, 67, 6, 1494);
			attr_dev(textarea, "class", "");
			attr_dev(textarea, "rows", "8");
			attr_dev(textarea, "placeholder", "Body in markdown");
			add_location(textarea, file, 72, 7, 1662);
			attr_dev(div2, "class", "field");
			add_location(div2, file, 71, 6, 1634);
			attr_dev(input2, "class", "input");
			attr_dev(input2, "type", "text");
			attr_dev(input2, "placeholder", "Enter tags");
			add_location(input2, file, 76, 7, 1800);
			attr_dev(div3, "class", "field");
			add_location(div3, file, 75, 6, 1772);
			attr_dev(div4, "class", "ui horizontal list");
			add_location(div4, file, 80, 7, 1949);
			attr_dev(div5, "class", "field");
			add_location(div5, file, 79, 6, 1921);
			attr_dev(button, "class", "ui button primary");
			attr_dev(button, "type", "submit");
			button.disabled = /*inProgress*/ ctx[1];
			add_location(button, file, 91, 6, 2230);
			attr_dev(div6, "class", "field");
			add_location(div6, file, 62, 5, 1324);
			attr_dev(div7, "class", "ui form");
			add_location(div7, file, 61, 4, 1296);
			attr_dev(div8, "class", "row");
			add_location(div8, file, 58, 2, 1243);
			attr_dev(div9, "class", "ui container svelte-11j5l9g");
			add_location(div9, file, 57, 1, 1213);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div9, anchor);
			append_dev(div9, div8);
			mount_component(listerrors, div8, null);
			append_dev(div8, t0);
			append_dev(div8, div7);
			append_dev(div7, div6);
			append_dev(div6, div0);
			append_dev(div0, input0);
			set_input_value(input0, /*article*/ ctx[0].title);
			append_dev(div6, t1);
			append_dev(div6, div1);
			append_dev(div1, input1);
			set_input_value(input1, /*article*/ ctx[0].description);
			append_dev(div6, t2);
			append_dev(div6, div2);
			append_dev(div2, textarea);
			set_input_value(textarea, /*article*/ ctx[0].body);
			append_dev(div6, t3);
			append_dev(div6, div3);
			append_dev(div3, input2);
			append_dev(div6, t4);
			append_dev(div6, div5);
			append_dev(div5, div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div4, null);
			}

			append_dev(div6, t5);
			append_dev(div6, button);
			append_dev(button, t6);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[10]),
					action_destroyer(enter_action = enter.call(null, input2, /*enter_function*/ ctx[11])),
					listen_dev(button, "click", /*publish*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*article*/ 1 && input0.value !== /*article*/ ctx[0].title) {
				set_input_value(input0, /*article*/ ctx[0].title);
			}

			if (dirty & /*article*/ 1 && input1.value !== /*article*/ ctx[0].description) {
				set_input_value(input1, /*article*/ ctx[0].description);
			}

			if (dirty & /*article*/ 1) {
				set_input_value(textarea, /*article*/ ctx[0].body);
			}

			if (dirty & /*remove, article*/ 33) {
				each_value = /*article*/ ctx[0].tagList;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*inProgress*/ 2) {
				prop_dev(button, "disabled", /*inProgress*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(listerrors.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(listerrors.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div9);
			destroy_component(listerrors);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function enter(node, callback) {
	function onkeydown(event) {
		if (event.which === 13) callback(node);
	}

	node.addEventListener("keydown", onkeydown);

	return {
		destroy() {
			node.removeEventListener("keydown", onkeydown);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Editor", slots, []);
	let { article } = $$props;
	let { slug } = $$props;
	let inProgress = false;
	let errors;
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(13, $session = value));

	function addTag(input) {
		$$invalidate(0, article.tagList = [...article.tagList, input.value], article);
		input.value = "";
	}

	function remove(index) {
		$$invalidate(0, article.tagList = [...article.tagList.slice(0, index), ...article.tagList.slice(index + 1)], article);
	}

	async function publish() {
		$$invalidate(1, inProgress = true);

		const response = await (slug
		? put(`articles/${slug}`, { article }, $session.user && $session.user.token)
		: post("articles", { article }, $session.user && $session.user.token));

		if (response.article) {
			goto(`/article/${response.article.slug}`);
		}

		$$invalidate(1, inProgress = false);
	}

	const writable_props = ["article", "slug"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Editor> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		article.title = this.value;
		$$invalidate(0, article);
	}

	function input1_input_handler() {
		article.description = this.value;
		$$invalidate(0, article);
	}

	function textarea_input_handler() {
		article.body = this.value;
		$$invalidate(0, article);
	}

	const enter_function = value => addTag(value);
	const click_handler = i => remove(i);

	$$self.$$set = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
		if ("slug" in $$props) $$invalidate(7, slug = $$props.slug);
	};

	$$self.$capture_state = () => ({
		goto,
		stores: stores$1,
		ListErrors,
		api,
		article,
		slug,
		inProgress,
		errors,
		session,
		addTag,
		remove,
		publish,
		enter,
		$session
	});

	$$self.$inject_state = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
		if ("slug" in $$props) $$invalidate(7, slug = $$props.slug);
		if ("inProgress" in $$props) $$invalidate(1, inProgress = $$props.inProgress);
		if ("errors" in $$props) $$invalidate(2, errors = $$props.errors);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		article,
		inProgress,
		errors,
		session,
		addTag,
		remove,
		publish,
		slug,
		input0_input_handler,
		input1_input_handler,
		textarea_input_handler,
		enter_function,
		click_handler
	];
}

class Editor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { article: 0, slug: 7 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Editor",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*article*/ ctx[0] === undefined && !("article" in props)) {
			console.warn("<Editor> was created without expected prop 'article'");
		}

		if (/*slug*/ ctx[7] === undefined && !("slug" in props)) {
			console.warn("<Editor> was created without expected prop 'slug'");
		}
	}

	get article() {
		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set article(value) {
		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slug() {
		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slug(value) {
		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Editor as E };
