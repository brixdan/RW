import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as validate_slots, u as stores$1, w as validate_store, x as component_subscribe, e as element, b as space, t as text, c as claim_element, f as children, g as detach_dev, h as claim_space, j as claim_text, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as listen_dev, p as set_data_dev, E as create_component, F as claim_component, G as mount_component, B as transition_in, z as transition_out, H as destroy_component, K as run_all, q as noop, L as createEventDispatcher, C as empty, v as validate_each_argument, r as destroy_each, M as binding_callbacks, N as bind, O as onMount, P as query_selector_all, Q as add_flush_callback } from './client.94090096.js';
import { g as get, a as api } from './api.1b809009.js';
import { A as ArticleList } from './index.02a81e5d.js';

/* src\components\MainView.svelte generated by Svelte v3.36.0 */
const file = "src\\components\\MainView.svelte";

// (32:4) {:else}
function create_else_block(ctx) {
	let a;
	let t;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Your Feed");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Your Feed");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "/login");
			attr_dev(a, "class", "item");
			add_location(a, file, 32, 8, 690);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(32:4) {:else}",
		ctx
	});

	return block;
}

// (28:4) {#if $session.user}
function create_if_block_1(ctx) {
	let a;
	let t;
	let a_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Your feed");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Your feed");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", ".");
			attr_dev(a, "class", a_class_value = "item " + (/*tab*/ ctx[0] === "feed" ? "active" : ""));
			add_location(a, file, 28, 8, 549);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*yourFeed*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tab*/ 1 && a_class_value !== (a_class_value = "item " + (/*tab*/ ctx[0] === "feed" ? "active" : ""))) {
				attr_dev(a, "class", a_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(28:4) {#if $session.user}",
		ctx
	});

	return block;
}

// (44:4) {#if tag}
function create_if_block(ctx) {
	let a;
	let i;
	let t0;
	let t1;
	let a_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			a = element("a");
			i = element("i");
			t0 = space();
			t1 = text(/*tag*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			i = claim_element(a_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			t0 = claim_space(a_nodes);
			t1 = claim_text(a_nodes, /*tag*/ ctx[1]);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "ui tag icon");
			add_location(i, file, 45, 12, 1162);
			attr_dev(a, "href", ".");
			attr_dev(a, "class", a_class_value = "item " + (/*tab*/ ctx[0] === "tag" ? "active" : ""));
			add_location(a, file, 44, 8, 1059);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, i);
			append_dev(a, t0);
			append_dev(a, t1);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler*/ ctx[8], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tag*/ 2) set_data_dev(t1, /*tag*/ ctx[1]);

			if (dirty & /*tab*/ 1 && a_class_value !== (a_class_value = "item " + (/*tab*/ ctx[0] === "tag" ? "active" : ""))) {
				attr_dev(a, "class", a_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(44:4) {#if tag}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let t0;
	let a0;
	let t1;
	let a0_class_value;
	let t2;
	let a1;
	let t3;
	let a1_class_value;
	let t4;
	let t5;
	let articlelist;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*$session*/ ctx[3].user) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*tag*/ ctx[1] && create_if_block(ctx);

	articlelist = new ArticleList({
			props: {
				p: /*p*/ ctx[2],
				tab: /*tab*/ ctx[0],
				tag: /*tag*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			if_block0.c();
			t0 = space();
			a0 = element("a");
			t1 = text("Global Feed");
			t2 = space();
			a1 = element("a");
			t3 = text("Popular tags");
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			create_component(articlelist.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			a0 = claim_element(div_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Global Feed");
			a0_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			a1 = claim_element(div_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "Popular tags");
			a1_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			claim_component(articlelist.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", ".");
			attr_dev(a0, "class", a0_class_value = "item " + (/*tab*/ ctx[0] === "all" ? "active" : ""));
			add_location(a0, file, 37, 8, 780);
			attr_dev(a1, "href", ".");
			attr_dev(a1, "class", a1_class_value = "item " + (/*tag*/ ctx[1] === "all" ? "active" : ""));
			add_location(a1, file, 40, 8, 911);
			attr_dev(div, "class", "ui tabular menu");
			add_location(div, file, 26, 0, 485);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block0.m(div, null);
			append_dev(div, t0);
			append_dev(div, a0);
			append_dev(a0, t1);
			append_dev(div, t2);
			append_dev(div, a1);
			append_dev(a1, t3);
			append_dev(div, t4);
			if (if_block1) if_block1.m(div, null);
			insert_dev(target, t5, anchor);
			mount_component(articlelist, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", /*globalfeed*/ ctx[6], false, false, false),
					listen_dev(a1, "click", /*popularTags*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div, t0);
				}
			}

			if (!current || dirty & /*tab*/ 1 && a0_class_value !== (a0_class_value = "item " + (/*tab*/ ctx[0] === "all" ? "active" : ""))) {
				attr_dev(a0, "class", a0_class_value);
			}

			if (!current || dirty & /*tag*/ 2 && a1_class_value !== (a1_class_value = "item " + (/*tag*/ ctx[1] === "all" ? "active" : ""))) {
				attr_dev(a1, "class", a1_class_value);
			}

			if (/*tag*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			const articlelist_changes = {};
			if (dirty & /*p*/ 4) articlelist_changes.p = /*p*/ ctx[2];
			if (dirty & /*tab*/ 1) articlelist_changes.tab = /*tab*/ ctx[0];
			if (dirty & /*tag*/ 2) articlelist_changes.tag = /*tag*/ ctx[1];
			articlelist.$set(articlelist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(articlelist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(articlelist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach_dev(t5);
			destroy_component(articlelist, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("MainView", slots, []);
	let { tab = "all" } = $$props;
	let { tag = null } = $$props;
	let { p } = $$props;
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(3, $session = value));

	function yourFeed() {
		$$invalidate(0, tab = "feed");
		$$invalidate(1, tag = null);
	}

	function globalfeed() {
		$$invalidate(0, tab = "all");
		$$invalidate(1, tag = null);
	}

	function popularTags() {
		$$invalidate(0, tab = "tags");
		$$invalidate(1, tag = "all");
	}

	const writable_props = ["tab", "tag", "p"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MainView> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(0, tab = "tag");

	$$self.$$set = $$props => {
		if ("tab" in $$props) $$invalidate(0, tab = $$props.tab);
		if ("tag" in $$props) $$invalidate(1, tag = $$props.tag);
		if ("p" in $$props) $$invalidate(2, p = $$props.p);
	};

	$$self.$capture_state = () => ({
		stores: stores$1,
		ArticleList,
		tab,
		tag,
		p,
		session,
		yourFeed,
		globalfeed,
		popularTags,
		$session
	});

	$$self.$inject_state = $$props => {
		if ("tab" in $$props) $$invalidate(0, tab = $$props.tab);
		if ("tag" in $$props) $$invalidate(1, tag = $$props.tag);
		if ("p" in $$props) $$invalidate(2, p = $$props.p);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		tab,
		tag,
		p,
		$session,
		session,
		yourFeed,
		globalfeed,
		popularTags,
		click_handler
	];
}

class MainView extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { tab: 0, tag: 1, p: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MainView",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*p*/ ctx[2] === undefined && !("p" in props)) {
			console.warn("<MainView> was created without expected prop 'p'");
		}
	}

	get tab() {
		throw new Error("<MainView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tab(value) {
		throw new Error("<MainView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tag() {
		throw new Error("<MainView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tag(value) {
		throw new Error("<MainView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get p() {
		throw new Error("<MainView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set p(value) {
		throw new Error("<MainView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\Tags.svelte generated by Svelte v3.36.0 */
const file$1 = "src\\components\\Tags.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (20:0) {:else}
function create_else_block$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("Loading Tags...");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "Loading Tags...");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$1, 20, 1, 415);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(20:0) {:else}",
		ctx
	});

	return block;
}

// (8:0) {#if tags}
function create_if_block$1(ctx) {
	let div;
	let each_value = /*tags*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "ui horizontal list");
			add_location(div, file$1, 8, 1, 151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*dispatch, tags*/ 3) {
				each_value = /*tags*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(8:0) {#if tags}",
		ctx
	});

	return block;
}

// (10:2) {#each tags as tag}
function create_each_block(ctx) {
	let div1;
	let div0;
	let a;
	let t0_value = /*tag*/ ctx[3] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*tag*/ ctx[3]);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a = claim_element(div0_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			a_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", ".");
			attr_dev(a, "class", "");
			add_location(a, file$1, 12, 5, 268);
			attr_dev(div0, "class", "ui tag label");
			add_location(div0, file$1, 11, 4, 235);
			attr_dev(div1, "class", "item");
			add_location(div1, file$1, 10, 3, 211);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, a);
			append_dev(a, t0);
			append_dev(div1, t1);

			if (!mounted) {
				dispose = listen_dev(a, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*tags*/ 1 && t0_value !== (t0_value = /*tag*/ ctx[3] + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(10:2) {#each tags as tag}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*tags*/ ctx[0]) return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tags", slots, []);
	let { tags } = $$props;
	const dispatch = createEventDispatcher();
	const writable_props = ["tags"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tags> was created with unknown prop '${key}'`);
	});

	const click_handler = tag => dispatch("select", { tag });

	$$self.$$set = $$props => {
		if ("tags" in $$props) $$invalidate(0, tags = $$props.tags);
	};

	$$self.$capture_state = () => ({ createEventDispatcher, tags, dispatch });

	$$self.$inject_state = $$props => {
		if ("tags" in $$props) $$invalidate(0, tags = $$props.tags);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [tags, dispatch, click_handler];
}

class Tags extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { tags: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tags",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*tags*/ ctx[0] === undefined && !("tags" in props)) {
			console.warn("<Tags> was created without expected prop 'tags'");
		}
	}

	get tags() {
		throw new Error("<Tags>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tags(value) {
		throw new Error("<Tags>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\Home.svelte generated by Svelte v3.36.0 */
const file$2 = "src\\components\\Home.svelte";

function create_fragment$2(ctx) {
	let t0;
	let div2;
	let div0;
	let mainview;
	let updating_tab;
	let t1;
	let div1;
	let p_1;
	let t2;
	let t3;
	let tags_1;
	let current;

	function mainview_tab_binding(value) {
		/*mainview_tab_binding*/ ctx[5](value);
	}

	let mainview_props = { p: /*p*/ ctx[0], tag: /*tag*/ ctx[2] };

	if (/*tab*/ ctx[1] !== void 0) {
		mainview_props.tab = /*tab*/ ctx[1];
	}

	mainview = new MainView({ props: mainview_props, $$inline: true });
	binding_callbacks.push(() => bind(mainview, "tab", mainview_tab_binding));

	tags_1 = new Tags({
			props: { tags: /*tags*/ ctx[3] },
			$$inline: true
		});

	tags_1.$on("select", /*setTags*/ ctx[4]);

	const block = {
		c: function create() {
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			create_component(mainview.$$.fragment);
			t1 = space();
			div1 = element("div");
			p_1 = element("p");
			t2 = text("Popular Tags");
			t3 = space();
			create_component(tags_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-12cril3\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(mainview.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			p_1 = claim_element(div1_nodes, "P", {});
			var p_1_nodes = children(p_1);
			t2 = claim_text(p_1_nodes, "Popular Tags");
			p_1_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			claim_component(tags_1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Conduit";
			attr_dev(div0, "class", "fifteen wide column");
			add_location(div0, file$2, 27, 8, 523);
			add_location(p_1, file$2, 31, 12, 661);
			attr_dev(div1, "class", "column");
			add_location(div1, file$2, 30, 8, 627);
			attr_dev(div2, "class", "ui grid");
			add_location(div2, file$2, 26, 0, 492);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			mount_component(mainview, div0, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, p_1);
			append_dev(p_1, t2);
			append_dev(div1, t3);
			mount_component(tags_1, div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const mainview_changes = {};
			if (dirty & /*p*/ 1) mainview_changes.p = /*p*/ ctx[0];
			if (dirty & /*tag*/ 4) mainview_changes.tag = /*tag*/ ctx[2];

			if (!updating_tab && dirty & /*tab*/ 2) {
				updating_tab = true;
				mainview_changes.tab = /*tab*/ ctx[1];
				add_flush_callback(() => updating_tab = false);
			}

			mainview.$set(mainview_changes);
			const tags_1_changes = {};
			if (dirty & /*tags*/ 8) tags_1_changes.tags = /*tags*/ ctx[3];
			tags_1.$set(tags_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mainview.$$.fragment, local);
			transition_in(tags_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mainview.$$.fragment, local);
			transition_out(tags_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
			destroy_component(mainview);
			destroy_component(tags_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Home", slots, []);
	let { p = 1 } = $$props;
	let tab;
	let tag;
	let tags;

	function setTags({ detail }) {
		$$invalidate(2, tag = detail.tag);
		$$invalidate(1, tab = "tag");
	}

	onMount(async () => {
		$$invalidate(3, { tags } = await get("tags"), tags);
	});

	const writable_props = ["p"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Home> was created with unknown prop '${key}'`);
	});

	function mainview_tab_binding(value) {
		tab = value;
		$$invalidate(1, tab);
	}

	$$self.$$set = $$props => {
		if ("p" in $$props) $$invalidate(0, p = $$props.p);
	};

	$$self.$capture_state = () => ({
		onMount,
		MainView,
		Tags,
		api,
		p,
		tab,
		tag,
		tags,
		setTags
	});

	$$self.$inject_state = $$props => {
		if ("p" in $$props) $$invalidate(0, p = $$props.p);
		if ("tab" in $$props) $$invalidate(1, tab = $$props.tab);
		if ("tag" in $$props) $$invalidate(2, tag = $$props.tag);
		if ("tags" in $$props) $$invalidate(3, tags = $$props.tags);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [p, tab, tag, tags, setTags, mainview_tab_binding];
}

class Home extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { p: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Home",
			options,
			id: create_fragment$2.name
		});
	}

	get p() {
		throw new Error("<Home>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set p(value) {
		throw new Error("<Home>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Home as H };
